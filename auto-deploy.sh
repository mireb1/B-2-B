#!/bin/bash

# Script de surveillance pour les mises √† jour automatiques
# Ce script v√©rifie p√©riodiquement les changements et red√©ploie si n√©cessaire

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
DEPLOY_SCRIPT="$SCRIPT_DIR/deploy.sh"
LOG_FILE="$SCRIPT_DIR/auto-deploy.log"
PID_FILE="$SCRIPT_DIR/auto-deploy.pid"

# Configuration
CHECK_INTERVAL=300  # V√©rifier toutes les 5 minutes (300 secondes)

# Fonction de logging
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Fonction pour d√©marrer la surveillance
start_monitoring() {
    # V√©rifier si le processus est d√©j√† en cours
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if ps -p $pid > /dev/null 2>&1; then
            log "‚ö†Ô∏è  Le processus de surveillance est d√©j√† en cours (PID: $pid)"
            exit 1
        else
            log "üßπ Suppression du fichier PID obsol√®te"
            rm -f "$PID_FILE"
        fi
    fi
    
    # Sauvegarder le PID
    echo $$ > "$PID_FILE"
    
    log "üöÄ D√©marrage de la surveillance automatique..."
    log "üìä V√©rification toutes les $CHECK_INTERVAL secondes"
    
    # Boucle de surveillance
    while true; do
        log "üîç V√©rification des mises √† jour..."
        
        # Ex√©cuter le script de d√©ploiement
        if [ -f "$DEPLOY_SCRIPT" ]; then
            bash "$DEPLOY_SCRIPT" >> "$LOG_FILE" 2>&1
        else
            log "‚ùå Script de d√©ploiement non trouv√©: $DEPLOY_SCRIPT"
        fi
        
        # Attendre avant la prochaine v√©rification
        sleep $CHECK_INTERVAL
    done
}

# Fonction pour arr√™ter la surveillance
stop_monitoring() {
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if ps -p $pid > /dev/null 2>&1; then
            log "üõë Arr√™t de la surveillance (PID: $pid)"
            kill $pid
            rm -f "$PID_FILE"
            log "‚úÖ Surveillance arr√™t√©e"
        else
            log "‚ö†Ô∏è  Aucun processus de surveillance trouv√©"
            rm -f "$PID_FILE"
        fi
    else
        log "‚ö†Ô∏è  Fichier PID non trouv√©"
    fi
}

# Fonction pour v√©rifier le statut
check_status() {
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if ps -p $pid > /dev/null 2>&1; then
            log "‚úÖ Surveillance active (PID: $pid)"
            return 0
        else
            log "‚ùå Surveillance inactive (PID obsol√®te)"
            rm -f "$PID_FILE"
            return 1
        fi
    else
        log "‚ùå Surveillance inactive"
        return 1
    fi
}

# Fonction pour afficher les logs
show_logs() {
    if [ -f "$LOG_FILE" ]; then
        tail -f "$LOG_FILE"
    else
        log "üìù Aucun log disponible"
    fi
}

# Fonction d'aide
show_help() {
    echo "Usage: $0 {start|stop|status|logs|help}"
    echo ""
    echo "Commandes:"
    echo "  start   - D√©marrer la surveillance automatique"
    echo "  stop    - Arr√™ter la surveillance"
    echo "  status  - V√©rifier le statut de la surveillance"
    echo "  logs    - Afficher les logs en temps r√©el"
    echo "  help    - Afficher cette aide"
    echo ""
    echo "Configuration:"
    echo "  Intervalle de v√©rification: $CHECK_INTERVAL secondes"
    echo "  Fichier de log: $LOG_FILE"
    echo "  Fichier PID: $PID_FILE"
}

# Gestion des signaux pour un arr√™t propre
trap 'log "üõë Signal re√ßu, arr√™t de la surveillance..."; rm -f "$PID_FILE"; exit 0' SIGINT SIGTERM

# Traitement des arguments
case "$1" in
    start)
        start_monitoring
        ;;
    stop)
        stop_monitoring
        ;;
    status)
        check_status
        ;;
    logs)
        show_logs
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo "Usage: $0 {start|stop|status|logs|help}"
        exit 1
        ;;
esac
